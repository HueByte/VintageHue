{
  "HueHordes/api/HueHordes.AI.AIBehavior.html": {
    "href": "HueHordes/api/HueHordes.AI.AIBehavior.html",
    "title": "Class AIBehavior | VintageHue Mods Documentation",
    "summary": "Class AIBehavior Namespace HueHordes.AI Assembly HueHordes.dll Clean AI behavior that follows the step-by-step logic: Spawn → Navigate to base center Attack players on sight while pathfinding Return to base navigation when player is lost Priority on doors/gates for destruction public class AIBehavior : EntityBehavior Inheritance object AIBehavior Constructors AIBehavior(Entity, DoorHealthManager) public AIBehavior(Entity entity, DoorHealthManager doorHealthManager) Parameters entity Entity doorHealthManager DoorHealthManager Methods OnGameTick(float) public override void OnGameTick(float dt) Parameters dt float PropertyName() public override string PropertyName() Returns string SetDebugVisualization(DebugVisualization?) Initialize debug visualization (static, shared across entities) public static void SetDebugVisualization(DebugVisualization? visualization) Parameters visualization DebugVisualization"
  },
  "HueHordes/api/HueHordes.AI.AIState.html": {
    "href": "HueHordes/api/HueHordes.AI.AIState.html",
    "title": "Enum AIState | VintageHue Mods Documentation",
    "summary": "Enum AIState Namespace HueHordes.AI Assembly HueHordes.dll AI States for the behavior public enum AIState Fields AttackingTarget = 1 DestroyingDoor = 2 NavigatingToBase = 0"
  },
  "HueHordes/api/HueHordes.AI.AStarNode.html": {
    "href": "HueHordes/api/HueHordes.AI.AStarNode.html",
    "title": "Class AStarNode | VintageHue Mods Documentation",
    "summary": "Class AStarNode Namespace HueHordes.AI Assembly HueHordes.dll A* node for pathfinding public class AStarNode : IComparable<AStarNode> Inheritance object AStarNode Implements IComparable<AStarNode> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FCost public float FCost { get; } Property Value float GCost public float GCost { get; set; } Property Value float HCost public float HCost { get; set; } Property Value float Parent public AStarNode? Parent { get; set; } Property Value AStarNode Position public Vec3i Position { get; set; } Property Value Vec3i Methods CompareTo(AStarNode?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(AStarNode? other) Parameters other AStarNode An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order."
  },
  "HueHordes/api/HueHordes.AI.AStarPathfinder.html": {
    "href": "HueHordes/api/HueHordes.AI.AStarPathfinder.html",
    "title": "Class AStarPathfinder | VintageHue Mods Documentation",
    "summary": "Class AStarPathfinder Namespace HueHordes.AI Assembly HueHordes.dll A* pathfinding implementation for 3D space with jump capability Handles terrain navigation with 1-block jump height public class AStarPathfinder Inheritance object AStarPathfinder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AStarPathfinder(ICoreServerAPI, bool) public AStarPathfinder(ICoreServerAPI serverApi, bool enablePathVisualization = true) Parameters serverApi ICoreServerAPI enablePathVisualization bool Methods ClearAllPathParticles() Clear all path particles public void ClearAllPathParticles() ClearPathParticles(string) Clear path particles for a specific entity public void ClearPathParticles(string entityId) Parameters entityId string FindPath(Vec3d, Vec3d, int) Find optimal path using A* algorithm in 3D space public List<Vec3d> FindPath(Vec3d start, Vec3d end, int maxNodes = 1000) Parameters start Vec3d end Vec3d maxNodes int Returns List<Vec3d> FindPath(Vec3d, Vec3d, string, int) Find optimal path using A* algorithm in 3D space with specific entity ID for visualization Uses entity base level (Y=2) as working coordinates public List<Vec3d> FindPath(Vec3d start, Vec3d end, string entityId, int maxNodes = 1000) Parameters start Vec3d end Vec3d entityId string maxNodes int Returns List<Vec3d> RefreshPathParticles() Refresh path particles (call periodically to maintain visibility) public void RefreshPathParticles() SetPathVisualization(bool) Enable or disable path visualization public void SetPathVisualization(bool enabled) Parameters enabled bool"
  },
  "HueHordes/api/HueHordes.AI.BaseDetection.html": {
    "href": "HueHordes/api/HueHordes.AI.BaseDetection.html",
    "title": "Class BaseDetection | VintageHue Mods Documentation",
    "summary": "Class BaseDetection Namespace HueHordes.AI Assembly HueHordes.dll Base detection system that finds player bases by looking for key structures Step 2: Basic base detection functionality public class BaseDetection Inheritance object BaseDetection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseDetection(ICoreServerAPI) public BaseDetection(ICoreServerAPI serverApi) Parameters serverApi ICoreServerAPI Methods DetectPlayerBase(IServerPlayer, int) Detect a player's base location public DetectedBase? DetectPlayerBase(IServerPlayer player, int searchRadius = 50) Parameters player IServerPlayer searchRadius int Returns DetectedBase GetPlayerBase(string) Get cached base for player public DetectedBase? GetPlayerBase(string playerUID) Parameters playerUID string Returns DetectedBase"
  },
  "HueHordes/api/HueHordes.AI.BaseIndicator.html": {
    "href": "HueHordes/api/HueHordes.AI.BaseIndicator.html",
    "title": "Class BaseIndicator | VintageHue Mods Documentation",
    "summary": "Class BaseIndicator Namespace HueHordes.AI Assembly HueHordes.dll An indicator that suggests the presence of a player base public class BaseIndicator Inheritance object BaseIndicator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Position public Vec3d Position { get; set; } Property Value Vec3d Priority public int Priority { get; set; } Property Value int Range public float Range { get; set; } Property Value float Type public BaseIndicatorType Type { get; set; } Property Value BaseIndicatorType"
  },
  "HueHordes/api/HueHordes.AI.BaseIndicatorType.html": {
    "href": "HueHordes/api/HueHordes.AI.BaseIndicatorType.html",
    "title": "Enum BaseIndicatorType | VintageHue Mods Documentation",
    "summary": "Enum BaseIndicatorType Namespace HueHordes.AI Assembly HueHordes.dll Types of base indicators public enum BaseIndicatorType Fields Bed = 1 Construction = 4 Crafting = 3 Door = 0 Storage = 2"
  },
  "HueHordes/api/HueHordes.AI.DebugVisualization.html": {
    "href": "HueHordes/api/HueHordes.AI.DebugVisualization.html",
    "title": "Class DebugVisualization | VintageHue Mods Documentation",
    "summary": "Class DebugVisualization Namespace HueHordes.AI Assembly HueHordes.dll Debug visualization system for base detection and pathfinding Shows colored particles above detected structures and along mob paths public class DebugVisualization Inheritance object DebugVisualization Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DebugVisualization(ICoreServerAPI) public DebugVisualization(ICoreServerAPI serverApi) Parameters serverApi ICoreServerAPI Properties ActiveBaseCount Get count of active base positions being visualized public int ActiveBaseCount { get; } Property Value int ActivePathCount Get count of entities with active path visualization public int ActivePathCount { get; } Property Value int IsPathVisualizationEnabled Get debug visualization status public bool IsPathVisualizationEnabled { get; } Property Value bool Methods ClearAllParticles() Clear all particles (base and path) public void ClearAllParticles() ClearAllPathParticles() Clear all path particles public void ClearAllPathParticles() ClearBaseParticles() Clear all base indicator particles public void ClearBaseParticles() ClearEntityPathParticles(string) Clear path particles for a specific entity public void ClearEntityPathParticles(string entityId) Parameters entityId string EnablePathVisualization(bool) Enable or disable path visualization public void EnablePathVisualization(bool enabled) Parameters enabled bool EnablePathVisualizationByDefault() Enable path visualization by default (call this to start seeing path particles) public void EnablePathVisualizationByDefault() RefreshParticles() Refresh all active particles (call periodically to maintain visibility) public void RefreshParticles() ShowBaseIndicator(BaseIndicator) Show a particle above a base indicator block public void ShowBaseIndicator(BaseIndicator indicator) Parameters indicator BaseIndicator ShowEntityPath(string, List<Vec3d>) Show particles along an entity's path at entity base level coordinates Path coordinates represent Y=2 level (entity base/bottom) public void ShowEntityPath(string entityId, List<Vec3d> pathNodes) Parameters entityId string pathNodes List<Vec3d>"
  },
  "HueHordes/api/HueHordes.AI.DetectedBase.html": {
    "href": "HueHordes/api/HueHordes.AI.DetectedBase.html",
    "title": "Class DetectedBase | VintageHue Mods Documentation",
    "summary": "Class DetectedBase Namespace HueHordes.AI Assembly HueHordes.dll Represents a detected player base public class DetectedBase Inheritance object DetectedBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BaseScore public int BaseScore { get; set; } Property Value int BaseType public string BaseType { get; set; } Property Value string BedPosition public Vec3d? BedPosition { get; set; } Property Value Vec3d? Center public Vec3d Center { get; set; } Property Value Vec3d DetectedAt public DateTime DetectedAt { get; set; } Property Value DateTime DistanceFromPlayer public float DistanceFromPlayer { get; set; } Property Value float IndicatorCount public int IndicatorCount { get; set; } Property Value int PlayerName public string PlayerName { get; set; } Property Value string PlayerUID public string PlayerUID { get; set; } Property Value string"
  },
  "HueHordes/api/HueHordes.AI.DoorHealthManager.html": {
    "href": "HueHordes/api/HueHordes.AI.DoorHealthManager.html",
    "title": "Class DoorHealthManager | VintageHue Mods Documentation",
    "summary": "Class DoorHealthManager Namespace HueHordes.AI Assembly HueHordes.dll Manages health and concurrent attackers for doors and gates public class DoorHealthManager Inheritance object DoorHealthManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DoorHealthManager(ICoreServerAPI) public DoorHealthManager(ICoreServerAPI serverApi) Parameters serverApi ICoreServerAPI Methods AttackDoor(Vec3d, long, float) Attack a door and return true if door should be destroyed public bool AttackDoor(Vec3d doorPos, long entityId, float damage = 50) Parameters doorPos Vec3d entityId long damage float Returns bool CleanupOldDoors() Clean up doors that no longer exist or haven't been attacked recently public void CleanupOldDoors() GetDoorInfo(Vec3d) Get door info for debugging/display public DoorInfo? GetDoorInfo(Vec3d doorPos) Parameters doorPos Vec3d Returns DoorInfo TryRegisterAttacker(Vec3d, long) Try to register an attacker for a door. Returns false if door is at max attackers. public bool TryRegisterAttacker(Vec3d doorPos, long entityId) Parameters doorPos Vec3d entityId long Returns bool UnregisterAttacker(Vec3d, long) Unregister an attacker from a door public void UnregisterAttacker(Vec3d doorPos, long entityId) Parameters doorPos Vec3d entityId long"
  },
  "HueHordes/api/HueHordes.AI.DoorInfo.html": {
    "href": "HueHordes/api/HueHordes.AI.DoorInfo.html",
    "title": "Class DoorInfo | VintageHue Mods Documentation",
    "summary": "Class DoorInfo Namespace HueHordes.AI Assembly HueHordes.dll Information about a door being attacked public class DoorInfo Inheritance object DoorInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentAttackers public HashSet<long> CurrentAttackers { get; set; } Property Value HashSet<long> CurrentHealth public float CurrentHealth { get; set; } Property Value float HealthPercentage public float HealthPercentage { get; } Property Value float LastAttackTime public long LastAttackTime { get; set; } Property Value long MaxAttackers public int MaxAttackers { get; set; } Property Value int MaxHealth public float MaxHealth { get; set; } Property Value float Position public Vec3i Position { get; set; } Property Value Vec3i"
  },
  "HueHordes/api/HueHordes.AI.HordeSystem.html": {
    "href": "HueHordes/api/HueHordes.AI.HordeSystem.html",
    "title": "Class HordeSystem | VintageHue Mods Documentation",
    "summary": "Class HordeSystem Namespace HueHordes.AI Assembly HueHordes.dll Clean horde system that focuses on basic functionality Step 3: Integration and testing system public class HordeSystem Inheritance object HordeSystem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HordeSystem(ICoreServerAPI) public HordeSystem(ICoreServerAPI serverApi) Parameters serverApi ICoreServerAPI Properties DoorHealthManager Get the door health manager for AI behaviors public DoorHealthManager DoorHealthManager { get; } Property Value DoorHealthManager Methods GetBaseDetection() Get base detection system for external access public BaseDetection GetBaseDetection() Returns BaseDetection GetDebugVisualization() Get debug visualization system public DebugVisualization? GetDebugVisualization() Returns DebugVisualization GetSpawningSystem() Get spawning system for external access public SpawningSystem GetSpawningSystem() Returns SpawningSystem"
  },
  "HueHordes/api/HueHordes.AI.PriorityQueue-1.html": {
    "href": "HueHordes/api/HueHordes.AI.PriorityQueue-1.html",
    "title": "Class PriorityQueue<T> | VintageHue Mods Documentation",
    "summary": "Class PriorityQueue<T> Namespace HueHordes.AI Assembly HueHordes.dll Priority queue for A* pathfinding public class PriorityQueue<T> where T : IComparable<T> Type Parameters T Inheritance object PriorityQueue<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count public int Count { get; } Property Value int Methods Clear() public void Clear() Dequeue() public T Dequeue() Returns T Enqueue(T) public void Enqueue(T item) Parameters item T"
  },
  "HueHordes/api/HueHordes.AI.SpawnConfig.html": {
    "href": "HueHordes/api/HueHordes.AI.SpawnConfig.html",
    "title": "Class SpawnConfig | VintageHue Mods Documentation",
    "summary": "Class SpawnConfig Namespace HueHordes.AI Assembly HueHordes.dll Configuration for spawning entities public class SpawnConfig Inheritance object SpawnConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Default public static SpawnConfig Default { get; } Property Value SpawnConfig EntityCode public string EntityCode { get; set; } Property Value string EntityCount public int EntityCount { get; set; } Property Value int MaxRadius public float MaxRadius { get; set; } Property Value float MinRadius public float MinRadius { get; set; } Property Value float"
  },
  "HueHordes/api/HueHordes.AI.SpawningSystem.html": {
    "href": "HueHordes/api/HueHordes.AI.SpawningSystem.html",
    "title": "Class SpawningSystem | VintageHue Mods Documentation",
    "summary": "Class SpawningSystem Namespace HueHordes.AI Assembly HueHordes.dll Clean spawning system that handles radius-based spawning around players Step 1: Basic spawning functionality public class SpawningSystem Inheritance object SpawningSystem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SpawningSystem(ICoreServerAPI, DoorHealthManager) public SpawningSystem(ICoreServerAPI serverApi, DoorHealthManager doorHealthManager) Parameters serverApi ICoreServerAPI doorHealthManager DoorHealthManager Methods SpawnAroundPlayer(IServerPlayer, SpawnConfig) Spawn entities in a radius around a player position public List<Entity> SpawnAroundPlayer(IServerPlayer player, SpawnConfig config) Parameters player IServerPlayer config SpawnConfig Returns List<Entity>"
  },
  "HueHordes/api/HueHordes.AI.TargetDetection.html": {
    "href": "HueHordes/api/HueHordes.AI.TargetDetection.html",
    "title": "Class TargetDetection | VintageHue Mods Documentation",
    "summary": "Class TargetDetection Namespace HueHordes.AI Assembly HueHordes.dll Handles target detection and validation for AI entities Focuses on finding players while ignoring creative/spectator mode players public class TargetDetection Inheritance object TargetDetection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TargetDetection(ICoreServerAPI) public TargetDetection(ICoreServerAPI serverApi) Parameters serverApi ICoreServerAPI Methods FindAllPlayersInRange(Vec3d, float) Find all valid player targets within range public Entity[] FindAllPlayersInRange(Vec3d position, float maxRange) Parameters position Vec3d maxRange float Returns Entity[] FindNearestPlayer(Vec3d, float) Find the nearest valid player target within the specified range public Entity? FindNearestPlayer(Vec3d position, float maxRange) Parameters position Vec3d maxRange float Returns Entity? GetTargetAimPoint(Entity) Get the closest point on the target that we should aim for public Vec3d GetTargetAimPoint(Entity target) Parameters target Entity Returns Vec3d IsValidTarget(Entity) Check if a specific entity is a valid target public bool IsValidTarget(Entity entity) Parameters entity Entity Returns bool PredictTargetPosition(Entity, float) Predict where a moving target will be public Vec3d PredictTargetPosition(Entity target, float predictionTime) Parameters target Entity predictionTime float Returns Vec3d"
  },
  "HueHordes/api/HueHordes.AI.Vec3i.html": {
    "href": "HueHordes/api/HueHordes.AI.Vec3i.html",
    "title": "Struct Vec3i | VintageHue Mods Documentation",
    "summary": "Struct Vec3i Namespace HueHordes.AI Assembly HueHordes.dll 3D integer vector for pathfinding public struct Vec3i : IEquatable<Vec3i> Implements IEquatable<Vec3i> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Vec3i(int, int, int) public Vec3i(int x, int y, int z) Parameters x int y int z int Properties X public int X { readonly get; set; } Property Value int Y public int Y { readonly get; set; } Property Value int Z public int Z { readonly get; set; } Property Value int Methods Equals(Vec3i) Indicates whether the current object is equal to another object of the same type. public bool Equals(Vec3i other) Parameters other Vec3i An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator ==(Vec3i, Vec3i) public static bool operator ==(Vec3i left, Vec3i right) Parameters left Vec3i right Vec3i Returns bool operator !=(Vec3i, Vec3i) public static bool operator !=(Vec3i left, Vec3i right) Parameters left Vec3i right Vec3i Returns bool"
  },
  "HueHordes/api/HueHordes.AI.html": {
    "href": "HueHordes/api/HueHordes.AI.html",
    "title": "Namespace HueHordes.AI | VintageHue Mods Documentation",
    "summary": "Namespace HueHordes.AI Classes AIBehavior Clean AI behavior that follows the step-by-step logic: Spawn → Navigate to base center Attack players on sight while pathfinding Return to base navigation when player is lost Priority on doors/gates for destruction AStarNode A* node for pathfinding AStarPathfinder A* pathfinding implementation for 3D space with jump capability Handles terrain navigation with 1-block jump height BaseDetection Base detection system that finds player bases by looking for key structures Step 2: Basic base detection functionality BaseIndicator An indicator that suggests the presence of a player base DebugVisualization Debug visualization system for base detection and pathfinding Shows colored particles above detected structures and along mob paths DetectedBase Represents a detected player base DoorHealthManager Manages health and concurrent attackers for doors and gates DoorInfo Information about a door being attacked HordeSystem Clean horde system that focuses on basic functionality Step 3: Integration and testing system PriorityQueue<T> Priority queue for A* pathfinding SpawnConfig Configuration for spawning entities SpawningSystem Clean spawning system that handles radius-based spawning around players Step 1: Basic spawning functionality TargetDetection Handles target detection and validation for AI entities Focuses on finding players while ignoring creative/spectator mode players Structs Vec3i 3D integer vector for pathfinding Enums AIState AI States for the behavior BaseIndicatorType Types of base indicators"
  },
  "HueHordes/api/HueHordes.Debug.DebugLogger.html": {
    "href": "HueHordes/api/HueHordes.Debug.DebugLogger.html",
    "title": "Class DebugLogger | VintageHue Mods Documentation",
    "summary": "Class DebugLogger Namespace HueHordes.Debug Assembly HueHordes.dll Minimal debug logging system for the NewAI public static class DebugLogger Inheritance object DebugLogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AIEvent(string, string, string) public static void AIEvent(string title, string message, string entityId) Parameters title string message string entityId string AIPath(string, string, string, string) public static void AIPath(string entityId, string pathType, string waypoints, string message) Parameters entityId string pathType string waypoints string message string AISpawn(string, string, string) public static void AISpawn(string entityType, string position, string target) Parameters entityType string position string target string AIState(string, string, string, string) public static void AIState(string entityId, string oldState, string newState, string message) Parameters entityId string oldState string newState string message string AITarget(string, string, string, string) public static void AITarget(string entityId, string targetType, string targetName, string message) Parameters entityId string targetType string targetName string message string Error(string, Exception?) public static void Error(string message, Exception? ex = null) Parameters message string ex Exception Event(string, string, string) public static void Event(string title, string message = \"\", string context = \"\") Parameters title string message string context string Initialize(ICoreServerAPI, bool, int) public static void Initialize(ICoreServerAPI serverApi, bool enableLogging, int loggingLevel) Parameters serverApi ICoreServerAPI enableLogging bool loggingLevel int TrackMethod() public static IDisposable TrackMethod() Returns IDisposable"
  },
  "HueHordes/api/HueHordes.Debug.html": {
    "href": "HueHordes/api/HueHordes.Debug.html",
    "title": "Namespace HueHordes.Debug | VintageHue Mods Documentation",
    "summary": "Namespace HueHordes.Debug Classes DebugLogger Minimal debug logging system for the NewAI"
  },
  "HueHordes/api/HueHordes.HueHordesModSystem.html": {
    "href": "HueHordes/api/HueHordes.HueHordesModSystem.html",
    "title": "Class HueHordesModSystem | VintageHue Mods Documentation",
    "summary": "Class HueHordesModSystem Namespace HueHordes Assembly HueHordes.dll Main mod system that integrates the AI horde system. Provides commands and configuration for the clean AI implementation. public class HueHordesModSystem : ModSystem Inheritance object HueHordesModSystem Methods Dispose() public override void Dispose() StartServerSide(ICoreServerAPI) public override void StartServerSide(ICoreServerAPI api) Parameters api ICoreServerAPI"
  },
  "HueHordes/api/HueHordes.ServerConfig.html": {
    "href": "HueHordes/api/HueHordes.ServerConfig.html",
    "title": "Class ServerConfig | VintageHue Mods Documentation",
    "summary": "Class ServerConfig Namespace HueHordes Assembly HueHordes.dll public class ServerConfig Inheritance object ServerConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count Number of mobs per horde. public int Count { get; set; } Property Value int DaysBetweenHordes In-game days between horde events. public int DaysBetweenHordes { get; set; } Property Value int DebugLoggingLevel Debug logging level (0=off, 1=basic, 2=detailed, 3=verbose) public int DebugLoggingLevel { get; set; } Property Value int EnableDebugLogging Enable debug logging system public bool EnableDebugLogging { get; set; } Property Value bool EntityCodes Supply full or domain-less entity codes. public string[] EntityCodes { get; set; } Property Value string[] NudgeSeconds How long to nudge mobs. public float NudgeSeconds { get; set; } Property Value float NudgeSpeed Motion per tick (e.g., ~0.05–0.12). public float NudgeSpeed { get; set; } Property Value float NudgeTowardInitialPos Enables simple \"move toward\" behavior. public bool NudgeTowardInitialPos { get; set; } Property Value bool SpawnRadiusMax Maximum ring spawn radius. public float SpawnRadiusMax { get; set; } Property Value float SpawnRadiusMin Minimum ring spawn radius. public float SpawnRadiusMin { get; set; } Property Value float"
  },
  "HueHordes/api/HueHordes.html": {
    "href": "HueHordes/api/HueHordes.html",
    "title": "Namespace HueHordes | VintageHue Mods Documentation",
    "summary": "Namespace HueHordes Classes HueHordesModSystem Main mod system that integrates the AI horde system. Provides commands and configuration for the clean AI implementation. ServerConfig"
  },
  "HueHordes/api/index.html": {
    "href": "HueHordes/api/index.html",
    "title": "API Reference | VintageHue Mods Documentation",
    "summary": "API Reference This folder contains automatically generated API documentation for the HueHordes mod. What is API Reference? API Reference documentation provides detailed information about the code structure, including: Classes and Interfaces: All public classes, their properties, methods, and constructors Method Signatures: Parameter types, return values, and detailed descriptions Code Examples: Usage examples and implementation details Inheritance Hierarchies: How classes relate to each other and extend base functionality How it's Generated The API documentation is automatically generated from the C# source code using DocFX metadata extraction. This process: Analyzes the HueHordes C# project files Extracts XML documentation comments from the code Creates structured YAML files describing the API Generates browsable HTML documentation What You'll Find Here When the documentation is built, this folder will contain: YAML metadata files (*.yml) - Structured data about classes and methods Manifest files - Index of all documented elements Generated pages - HTML documentation for browsing These files are automatically generated and should not be manually edited. They are excluded from version control via .gitignore patterns."
  },
  "HueHordes/articles/ai-system-architecture.html": {
    "href": "HueHordes/articles/ai-system-architecture.html",
    "title": "AI System Architecture | VintageHue Mods Documentation",
    "summary": "AI System Architecture HueHordes implements a sophisticated AI system that combines intelligent pathfinding, dynamic behavior management, and reactive decision-making to create engaging and challenging horde encounters. System Overview The HueHordes AI system is built on three core pillars that work together to create intelligent, adaptive horde behavior. flowchart LR Player[Player Base] --> Detection[Base Detection] Detection --> Pathfinding[A* Pathfinding] Pathfinding --> Horde[Horde Spawn] Horde --> Attack[Attack Base] Architecture Components 1. Pathfinding Engine The pathfinding system is the foundation of intelligent movement in HueHordes. A* Pathfinder Implementation Location: AStarPathfinder.cs Core Features: 3D Pathfinding: Full three-dimensional navigation with Y-axis awareness Entity-Aware Coordinates: Uses entity base positioning (Y-1=ground, Y=entity base, Y+1=body) Symmetrical Movement: Balanced ±1 block movement in all directions Dynamic Obstacle Detection: Real-time path recalculation around obstacles Algorithm Details: public class AStarPathfinder { // Core pathfinding with heuristic optimization private double CalculateHeuristic(Vec3i current, Vec3i target) { // Manhattan distance with 3D awareness return Math.Abs(current.X - target.X) + Math.Abs(current.Y - target.Y) + Math.Abs(current.Z - target.Z); } // Movement validation with entity physics private bool IsValidMovement(Vec3i from, Vec3i to, IBlockAccessor blockAccessor) { // Symmetrical movement constraints int deltaX = Math.Abs(to.X - from.X); int deltaY = Math.Abs(to.Y - from.Y); int deltaZ = Math.Abs(to.Z - from.Z); return deltaX <= 1 && deltaY <= 1 && deltaZ <= 1; } } Performance Optimizations: Cached Results: Path caching to avoid redundant calculations Early Termination: Algorithm stops when optimal path is found Selective Updates: Only recalculates when environment changes Coordinate System Architecture The pathfinding uses an entity-aware coordinate system: Y Level Entity Part Validation Y+1 Head/Body Space Must be passable Y Entity Base Entity position reference Y-1 Ground Block Must be solid for standing This system ensures entities can: Walk on solid surfaces Navigate through 2-block high spaces Avoid getting stuck in walls or ceilings Handle stairs and elevation changes 2. Behavior Management System The behavior system controls how entities act and react in different situations. State Machine Architecture stateDiagram-v2 [*] --> Spawning Spawning --> Pathing : Path Found Spawning --> Idle : No Path Available Pathing --> Moving : Valid Path Pathing --> Searching : Path Blocked Moving --> Engaging : Target in Range Moving --> Pathing : Path Complete Engaging --> Moving : Target Lost Engaging --> Attacking : Combat Ready Searching --> Pathing : New Path Found Searching --> Idle : Search Failed Idle --> Pathing : New Target Attacking --> Engaging : Combat Continue Attacking --> Moving : Combat End Behavior Components Goal Selection System: Primary Goal: Reach player base Secondary Goals: Engage nearby threats Fallback Goals: Random exploration Action Execution: Movement Actions: Pathfinding-based navigation Combat Actions: Attack patterns and positioning Utility Actions: Resource interaction and environment manipulation 3. Decision Making Framework The decision-making system enables dynamic responses to changing conditions. Environment Analysis Threat Detection: public class ThreatAssessment { public enum ThreatLevel { None, // No immediate threats Low, // Distant or weak threats Medium, // Moderate threats requiring attention High, // Immediate danger requiring action Critical // Life-threatening situations } public ThreatLevel AssessEnvironment(Entity entity) { // Analyze nearby players, structures, and hazards // Return appropriate threat level } } Environmental Factors: Player Proximity: Distance to nearest players Base Detection: Identification of player structures Terrain Analysis: Navigation difficulty assessment Resource Availability: Items and blocks in area Adaptive Response System The AI adapts its behavior based on: Success Rates: Learning from previous pathfinding attempts Environmental Changes: Responding to block changes and new obstacles Player Behavior: Adapting to player defensive strategies Group Dynamics: Coordinating with other horde entities Integration Architecture System Initialization public class HordeSystemManager { private AStarPathfinder pathfinder; private BehaviorManager behaviorManager; private DecisionEngine decisionEngine; public void Initialize() { // Initialize core systems pathfinder = new AStarPathfinder(); behaviorManager = new BehaviorManager(); decisionEngine = new DecisionEngine(); // Wire up event handlers pathfinder.OnPathFound += behaviorManager.HandlePathFound; behaviorManager.OnGoalChanged += decisionEngine.UpdateGoals; decisionEngine.OnDecisionMade += ExecuteAction; } } Data Flow Architecture sequenceDiagram participant E as Entity participant AI as AI Controller participant P as Pathfinder participant B as Behavior Manager participant D as Decision Engine E->>AI: Update Request AI->>D: Analyze Situation D->>B: Select Goal B->>P: Request Path P->>B: Return Path B->>AI: Execute Action AI->>E: Apply Movement Performance Considerations Computational Optimization Pathfinding Performance: Thread Safety: Lock-free algorithms where possible Memory Pooling: Reuse of calculation objects Selective Processing: Update only active entities Update Frequency: High Priority: Combat and immediate threats (every tick) Medium Priority: Pathfinding and navigation (every 5 ticks) Low Priority: Long-term planning (every 20 ticks) Scalability Architecture Entity Management: public class EntityAIManager { private Dictionary<long, AIController> activeControllers; private Queue<AIController> updateQueue; public void ProcessUpdates(int maxUpdatesPerTick) { // Process limited number of AI updates per game tick // Distribute computational load across multiple frames } } Resource Management: Memory Limits: Automatic cleanup of unused AI data CPU Budgeting: Limited processing time per game tick Cache Management: Intelligent caching of expensive calculations Debugging and Analysis Debug Visualization System Pathfinding Visualization: Path Particles: Visual representation of calculated paths Node Indicators: Show explored and optimal nodes Status Overlays: Real-time AI state information Performance Monitoring: Timing Metrics: Pathfinding calculation times Memory Usage: AI system memory consumption Success Rates: Pathfinding and goal achievement statistics Debug Commands Command Purpose Output /horde debug on Enable AI debugging Visual indicators /testparticles path Show pathfinding Path visualization /horde analyze System analysis Performance metrics Future Enhancements Planned AI Improvements Machine Learning Integration: Adaptive behavior based on player patterns Swarm Intelligence: Coordinated group behaviors Dynamic Difficulty: AI complexity scaling with player skill Predictive Pathfinding: Anticipating player movements Extensibility Framework The AI system is designed for easy extension: public interface IAIBehavior { BehaviorResult Execute(AIContext context); bool CanExecute(AIContext context); int Priority { get; } } public class CustomBehavior : IAIBehavior { // Implement custom AI behaviors // Integrate with existing system } Technical Specifications System Requirements Component Requirement Notes CPU Multi-core recommended Pathfinding is CPU-intensive Memory 2GB+ available For AI data structures Threading Background thread support Async pathfinding calculations Configuration Parameters AI System Settings: PathfindingTimeout: Maximum time for path calculations MaxSearchNodes: Limit pathfinding complexity UpdateFrequency: AI update interval DebugVisualization: Enable/disable debug rendering For implementation details, see the Pathfinding System Guide and Development Guide."
  },
  "HueHordes/articles/base-detection-system.html": {
    "href": "HueHordes/articles/base-detection-system.html",
    "title": "Base Detection System | VintageHue Mods Documentation",
    "summary": "Base Detection System The Base Detection System in HueHordes is responsible for identifying player-constructed bases and structures, enabling intelligent horde targeting and strategic gameplay mechanics. System Overview The base detection system analyzes the game world to identify areas that represent player investment and activity. This allows hordes to focus on meaningful targets rather than wandering aimlessly. flowchart LR World[Scan World] --> Analyze[Analyze Blocks] Analyze --> Score[Score Base Value] Score --> Select[Select Target] Select --> Horde[Send Horde] Core Components 1. Structure Analysis Engine The structure analysis engine examines the physical composition of potential bases. Block Type Classification Crafted vs Natural Blocks: public enum BlockClassification { Natural, // Stone, dirt, naturally generated blocks BasicCrafted, // Simple player-made blocks (cobble, planks) Advanced, // Refined materials (cut stone, metal) Functional, // Interactive blocks (chests, workbenches) Decorative, // Non-functional aesthetic blocks Defensive // Walls, doors, gates } Detection Criteria: Block Type Base Indicator Weight Natural Blocks Low (unless arranged) 1x Crafted Materials Medium 3x Functional Blocks High 5x Rare Materials Very High 8x Defensive Structures Maximum 10x Pattern Recognition Structure Patterns: public class StructurePattern { public PatternType Type { get; set; } public int MinBlockCount { get; set; } public double RequiredDensity { get; set; } public List<BlockClassification> RequiredBlocks { get; set; } } public enum PatternType { Wall, // Linear defensive structures Room, // Enclosed spaces with floor, walls, ceiling Farm, // Agricultural areas with crops Workshop, // Areas with multiple functional blocks Storage, // Concentrated chest/container areas Compound // Large multi-structure bases } Pattern Detection Algorithm: Flood Fill Analysis: Identifies connected crafted block regions Geometric Analysis: Detects rectangular, circular, and irregular shapes Density Calculation: Measures block concentration in areas Connectivity Mapping: Links separate structures into compound bases 2. Activity Detection System The activity detection system identifies recent player interaction and ongoing base development. Player Presence Indicators Direct Indicators: Player spawn points and beds Recent player positions (tracked over time) Light sources (torches, lanterns) Active furnaces and workstations Indirect Indicators: Recently placed blocks Harvested crops or resources Modified terrain (mining, excavation) Tool usage patterns Change Tracking public class ActivityTracker { private Dictionary<Vec3i, BlockChange> recentChanges; private Dictionary<long, PlayerActivity> playerActivities; public void TrackBlockChange(Vec3i position, Block oldBlock, Block newBlock) { var change = new BlockChange { Position = position, OldBlock = oldBlock, NewBlock = newBlock, Timestamp = DateTime.UtcNow, ChangeType = ClassifyChange(oldBlock, newBlock) }; recentChanges[position] = change; UpdateActivityHeatmap(position); } } Change Classification: Construction: Placing crafted blocks Destruction: Breaking player-made structures Improvement: Upgrading materials (cobble → stone) Expansion: Adding to existing structures Maintenance: Replacing damaged blocks 3. Base Scoring System The scoring system evaluates detected structures to determine their importance as horde targets. Scoring Factors Size and Complexity: public class BaseScorer { public double CalculateBaseScore(DetectedBase baseData) { double score = 0; // Size factor (larger bases are more significant) score += baseData.BlockCount * 0.1; // Complexity factor (variety of block types) score += baseData.UniqueBlockTypes * 2.0; // Functional factor (workstations, storage) score += baseData.FunctionalBlocks * 5.0; // Defensive factor (walls, gates, towers) score += baseData.DefensiveStructures * 8.0; // Activity factor (recent player interaction) score += baseData.RecentActivity * 3.0; // Rarity factor (valuable materials) score += baseData.RareMaterials * 10.0; return Math.Min(score, 1000); // Cap maximum score } } Scoring Categories: Category Description Score Range Outpost Small, basic structures 1-50 Settlement Medium complexity bases 51-200 Fortress Large, well-defended bases 201-500 Metropolis Massive compound bases 501-1000 Priority Calculation Target Priority Factors: Base Score: Primary scoring metric Distance: Closer bases get priority bonus Accessibility: Easier to reach bases preferred Player Count: More active players increase priority Defense Level: Higher defenses increase challenge value public double CalculatePriority(DetectedBase baseData, Vec3d hordePosition) { double baseScore = CalculateBaseScore(baseData); double distance = baseData.Center.DistanceTo(hordePosition); double accessibility = CalculateAccessibility(baseData, hordePosition); // Distance penalty (farther bases less attractive) double distanceFactor = Math.Max(0.1, 1.0 - (distance / 500.0)); // Accessibility bonus (easier paths preferred) double accessFactor = Math.Max(0.5, accessibility); return baseScore * distanceFactor * accessFactor; } 4. Detection Algorithms Area Scanning Chunk-Based Analysis: public class ChunkAnalyzer { public void AnalyzeChunk(IWorldChunk chunk) { var blockCounts = new Dictionary<BlockClassification, int>(); var patterns = new List<StructurePattern>(); // Iterate through all blocks in chunk for (int x = 0; x < 32; x++) { for (int y = 0; y < 256; y++) { for (int z = 0; z < 32; z++) { var block = chunk.GetBlock(x, y, z); var classification = ClassifyBlock(block); blockCounts[classification]++; // Check for structure patterns CheckPatterns(x, y, z, block, patterns); } } } // Evaluate chunk for base potential EvaluateChunk(blockCounts, patterns); } } Radial Scanning: Center Point: Start from player spawn or known bases Expanding Radius: Search outward in growing circles Selective Depth: Focus on areas with initial base indicators Performance Optimization: Skip areas with no crafted blocks Multi-Level Detection Level 1 - Quick Scan: Identify chunks with crafted blocks Basic pattern recognition Minimal computational cost Level 2 - Detailed Analysis: Complete structure mapping Activity correlation Pattern classification Level 3 - Deep Evaluation: Complex base relationships Historical activity analysis Strategic value assessment Integration with Horde System Target Selection public class TargetSelector { public DetectedBase SelectTarget(List<DetectedBase> availableBases, Vec3d hordePosition) { // Calculate priorities for all bases var prioritizedBases = availableBases .Select(b => new { Base = b, Priority = CalculatePriority(b, hordePosition) }) .OrderByDescending(x => x.Priority) .ToList(); // Select highest priority accessible base foreach (var entry in prioritizedBases) { if (IsAccessible(entry.Base, hordePosition)) { return entry.Base; } } return null; // No suitable target found } } Pathfinding Integration The base detection system works closely with the pathfinding engine: Target Identification: Base detection provides destination coordinates Access Point Analysis: Identifies optimal approach routes to bases Obstacle Mapping: Provides defensive structure information Dynamic Updates: Updates pathfinding when base structures change Configuration and Tuning Detection Parameters Sensitivity Settings: { \"BaseDetection\": { \"MinimumBlockCount\": 20, \"RequiredBlockDensity\": 0.3, \"ScanRadius\": 100, \"UpdateFrequency\": 300, \"ActivityTimeWindow\": 3600, \"ScoreThreshold\": 25.0 } } Block Weights Configuration: { \"BlockWeights\": { \"Natural\": 1.0, \"BasicCrafted\": 3.0, \"Advanced\": 5.0, \"Functional\": 8.0, \"Defensive\": 10.0, \"Rare\": 15.0 } } Performance Optimization Caching Strategy: Result Caching: Store detection results for reuse Incremental Updates: Only re-analyze changed areas Background Processing: Perform scans during low activity periods Resource Management: public class DetectionManager { private readonly Timer scanTimer; private readonly LRUCache<Vec3i, DetectionResult> resultCache; public void ScheduleScan(Vec3i center, int priority) { // Queue scan based on priority // Manage computational resources // Balance accuracy vs performance } } Debug and Visualization Debug Commands Command Function Output /horde detectbase [player] [radius] Scan area for base Base detection results /horde debug base [player] Visualize detected base Base particle indicators /horde spawntobase [player] [count] Test base targeting Spawn entities that target base Visual Indicators Base Visualization: Green Particles: Confirmed base areas Yellow Particles: Potential base regions Red Particles: High-priority targets Blue Particles: Recent activity areas Limitations and Considerations Current Limitations Natural Formations: May occasionally flag natural formations as bases Underground Bases: Limited detection of deep underground structures Distributed Bases: Difficulty linking separated but related structures Performance Impact: Large-scale scans can impact server performance Future Improvements Enhanced Pattern Recognition: Machine learning integration for better pattern detection Historical data analysis for improved accuracy Player behavior prediction Advanced Activity Tracking: Economic activity monitoring (trading, crafting) Social activity detection (multiplayer interaction) Defensive activity recognition (combat preparations) For related systems, see AI System Architecture and Pathfinding System Guide."
  },
  "HueHordes/articles/future-development-roadmap.html": {
    "href": "HueHordes/articles/future-development-roadmap.html",
    "title": "Future Development Roadmap | VintageHue Mods Documentation",
    "summary": "Future Development Roadmap This roadmap outlines the planned features, improvements, and long-term vision for HueHordes development. The roadmap is organized by development phases and priority levels. Development Philosophy HueHordes development follows these core principles: Player-Centric Design: All features should enhance player experience and engagement Performance First: New features must maintain or improve game performance Modular Architecture: Systems should be extensible and maintainable Community Feedback: Player input drives feature prioritization Vintage Story Integration: Seamless integration with base game mechanics Current Status (v1.0.x) ✅ Completed Features Core Systems: Basic horde spawning and management 3D A* pathfinding with entity-aware coordinates Particle-based debug visualization Configuration system with JSON settings Command-line interface for testing and debugging AI Features: Intelligent pathfinding to player bases Obstacle avoidance and navigation Basic behavior state management Symmetrical movement validation Infrastructure: Comprehensive documentation system Automated build pipeline Testing framework Performance monitoring tools \uD83D\uDD04 Current Development (v1.1.x) In Progress: Enhanced base detection algorithms Improved AI decision-making systems Performance optimizations for large hordes Additional debug and analysis tools Planned for Next Release: Advanced behavior patterns Configuration GUI interface Multiplayer synchronization improvements Extended entity customization options Short-Term Roadmap (3-6 months) Version 1.2.0 - Enhanced AI Systems \uD83C\uDFAF Primary Goals: Implement advanced AI behavior patterns Add dynamic difficulty scaling Enhance base detection accuracy Improve pathfinding performance \uD83D\uDD27 Technical Improvements: gantt title v1.2.0 Development Timeline dateFormat YYYY-MM-DD section AI Enhancement Behavior Patterns :active, ai1, 2024-02-01, 2024-02-28 Difficulty Scaling :ai2, 2024-03-01, 2024-03-15 section Detection Systems Base Detection v2 :detect1, 2024-02-15, 2024-03-30 Activity Tracking :detect2, 2024-03-15, 2024-04-15 section Performance Pathfinding Optimization :perf1, 2024-02-01, 2024-03-01 Memory Management :perf2, 2024-03-01, 2024-03-30 New Features: Adaptive AI: AI that learns from player behavior patterns Swarm Intelligence: Coordinated group behaviors for horde entities Dynamic Events: Special horde events triggered by player actions Enhanced Visualization: Improved debug tools and real-time monitoring Performance Targets: 50% reduction in pathfinding calculation time 30% decrease in memory usage for large hordes Support for 100+ simultaneous entities Sub-second response time for base detection Version 1.3.0 - Player Experience Focus \uD83C\uDFAF Primary Goals: Improve player interaction and feedback Add comprehensive customization options Enhance multiplayer experience Implement progression systems Player Features: Horde Difficulty Progression: Gradual increase in challenge over time Player Statistics: Detailed tracking of horde encounters and survival Customizable Behaviors: Player-configurable AI personalities Notification Systems: In-game alerts for horde activities Multiplayer Enhancements: Synchronized Events: Coordinated horde attacks across all players Cooperative Challenges: Special events requiring teamwork Individual Targeting: AI that considers each player's base separately Load Balancing: Optimized server performance for multiplayer Medium-Term Roadmap (6-12 months) Version 2.0.0 - Major System Overhaul \uD83C\uDFAF Revolutionary Changes: Complete AI architecture redesign Machine learning integration Advanced ecosystem simulation Cross-mod compatibility framework \uD83E\uDDE0 AI Revolution: graph TB A[AI Core v2.0] --> B[Machine Learning Engine] A --> C[Ecosystem Simulation] A --> D[Predictive Behaviors] B --> B1[Player Pattern Analysis] B --> B2[Adaptive Strategies] B --> B3[Learning Algorithms] C --> C1[Environmental Factors] C --> C2[Resource Competition] C --> C3[Natural Behaviors] D --> D1[Movement Prediction] D --> D2[Action Anticipation] D --> D3[Counter-Strategies] Machine Learning Features: Behavioral Analysis: AI learns from successful and failed strategies Pattern Recognition: Identification of player building and movement patterns Adaptive Strategies: Dynamic adjustment of horde tactics based on player behavior Predictive Pathfinding: Anticipation of player movements and base expansion Ecosystem Integration: Environmental Awareness: AI considers weather, time of day, and seasons Resource Competition: Hordes compete with players for resources Natural Behaviors: Integration with existing animal AI systems Food Chain Dynamics: Complex predator-prey relationships Version 2.1.0 - Content Expansion \uD83C\uDFAF Content Goals: Multiple horde types with unique behaviors Specialized entity roles and abilities Dynamic event system Quest and objective integration Horde Varieties: Horde Type Behavior Specialization Raiders Aggressive, direct assault Combat and destruction Scouts Stealth, reconnaissance Intelligence gathering Builders Construct siege equipment Engineering and siege Swarm Overwhelming numbers Coordination and persistence Elite Advanced tactics Strategic planning Dynamic Events: Seasonal Migrations: Horde movements following natural patterns Territory Disputes: Conflicts between different horde factions Resource Wars: Competition for scarce materials Ancient Awakenings: Rare, powerful entities with unique abilities Long-Term Vision (1-2 years) Version 3.0.0 - Ecosystem Simulation \uD83C\uDF0D Vision Statement: Create a living, breathing world where hordes are part of a complex ecosystem that reacts dynamically to player actions and environmental changes. \uD83D\uDD2C Advanced Systems: mindmap root)HueHordes Ecosystem( AI Evolution Neural Networks Genetic Algorithms Emergent Behaviors Self-Modifying Code Environmental Systems Climate Simulation Resource Dynamics Territorial Control Migration Patterns Player Integration Reputation Systems Diplomatic Options Trade Relationships Influence Networks Cross-Mod Compatibility API Framework Event System Data Exchange Shared Resources Revolutionary Features: AI Evolution System: Neural Network AI: Deep learning for complex decision-making Genetic Algorithms: Evolution of successful horde strategies Emergent Behaviors: Unpredictable but logical AI actions Self-Improvement: AI that modifies its own behavior patterns Environmental Simulation: Climate Effects: Weather patterns influence horde behavior Resource Scarcity: Dynamic resource availability affects AI goals Territorial Systems: Horde factions control and defend territories Migration Simulation: Realistic seasonal and behavioral migrations Player Relationship Systems: Reputation Mechanics: Player actions affect horde faction relationships Diplomatic Options: Negotiation and alliance possibilities with certain hordes Trade Systems: Economic interactions with peaceful horde factions Cultural Exchange: Learning and technology sharing between players and AI Version 4.0.0 - Multiverse Integration \uD83C\uDF0C Ultimate Vision: Cross-server, cross-world integration creating a persistent horde multiverse where actions in one world affect others. Multiverse Features: Cross-Server Events: Coordinated activities across multiple game servers Persistent Lore: Shared history and mythology across all installations Global Statistics: Worldwide tracking of player and horde activities Universal Progression: Character and faction progression that spans worlds Technical Roadmap Architecture Evolution Current Architecture (v1.x): Game Server ├── HueHordes Core ├── Pathfinding Engine ├── Behavior System └── Configuration Manager Target Architecture (v3.x): HueHordes Ecosystem ├── AI Core Engine │ ├── Neural Network Processor │ ├── Genetic Algorithm Manager │ └── Learning Database ├── Environmental Simulator │ ├── Climate System │ ├── Resource Manager │ └── Territory Controller ├── Cross-Mod Interface │ ├── API Gateway │ ├── Event Publisher │ └── Data Exchange └── Multiverse Connector ├── Server Network ├── Global Database └── Synchronization Manager Performance Scaling Computational Requirements: Version CPU Usage Memory Usage Network Storage v1.x Low 100MB Local 50MB v2.x Medium 500MB Regional 200MB v3.x High 2GB Global 1GB v4.x Variable 4GB+ Multiverse 5GB+ Optimization Strategies: Distributed Computing: Spread AI calculations across multiple threads/servers Cloud Integration: Offload complex calculations to cloud services Caching Systems: Intelligent caching of expensive computations Adaptive Quality: Dynamic adjustment of AI complexity based on performance Community Integration Open Source Evolution Current Status: Closed source with open documentation Target: Gradual open-sourcing of non-core components Open Source Roadmap: Phase 1: API and interface specifications Phase 2: Utility libraries and tools Phase 3: Behavior scripting system Phase 4: Core AI algorithms (selective) Community Features Planned Community Systems: Behavior Marketplace: User-created AI behaviors Scenario Sharing: Custom horde events and challenges Mod Integration: Seamless integration with other popular mods Community Challenges: Server-wide events and competitions Developer Tools Planned Development Tools: Visual Behavior Editor: GUI for creating custom AI behaviors Scenario Designer: Tool for creating complex horde events Performance Profiler: Real-time analysis of AI performance Debug Visualizer: Advanced 3D visualization of AI decision-making Research Areas Experimental Features Current Research: Quantum Computing Integration: Exploring quantum algorithms for pathfinding Blockchain Persistence: Decentralized storage of horde evolution data VR Integration: Virtual reality interfaces for horde observation Procedural Behavior Generation: AI that creates new behaviors automatically Future Research Directions: Consciousness Simulation: Exploring true AI consciousness in game entities Emotional Intelligence: AI with emotional responses and memory Creative Problem Solving: AI that invents new strategies and tools Player Psychology: Deep analysis of player behavior and preferences Implementation Timeline Development Phases timeline title HueHordes Development Timeline 2024 Q1 : v1.2.0 Release : Enhanced AI Systems : Performance Optimization 2024 Q2 : v1.3.0 Release : Player Experience : Multiplayer Enhancement 2024 Q3 : v2.0.0 Development : AI Architecture Redesign : Machine Learning Integration 2024 Q4 : v2.0.0 Release : Revolutionary AI Systems : Ecosystem Simulation 2025 Q1 : v2.1.0 Release : Content Expansion : Multiple Horde Types 2025 Q2 : v3.0.0 Development : Advanced Ecosystem : Environmental Simulation 2025 Q4 : v3.0.0 Release : Complete Ecosystem : Cross-Mod Integration 2026+ : v4.0.0+ : Multiverse Integration : Universal Connectivity Milestone Dependencies Critical Dependencies: Vintage Story API Stability: Core game updates affecting mod compatibility Performance Requirements: Hardware and server capabilities Community Feedback: Player responses to new features Technical Feasibility: Research outcomes and implementation challenges Risk Assessment Technical Risks Risk Probability Impact Mitigation Performance Degradation Medium High Extensive testing, performance monitoring Compatibility Issues Low High Careful API usage, version testing Complexity Creep High Medium Modular design, feature prioritization Resource Limitations Medium Medium Efficient algorithms, optimization focus Market Risks Risk Probability Impact Mitigation Player Interest Decline Low High Regular content updates, community engagement Competing Mods Medium Medium Unique features, quality focus Game Engine Changes Low High Flexible architecture, adaptation planning Success Metrics Key Performance Indicators Technical Metrics: Performance: Frame rate impact <5%, memory usage optimization Stability: Zero critical bugs, 99%+ uptime Compatibility: Support for all major VS versions and popular mods Player Engagement Metrics: Adoption Rate: Downloads and active installations Retention: Continued usage over time periods Satisfaction: Community feedback and ratings Innovation: Unique features not found in competing mods Development Metrics: Release Cadence: Regular, predictable update schedule Code Quality: Maintainable, well-documented codebase Community Contribution: Developer participation and contribution rates This roadmap is subject to change based on community feedback, technical discoveries, and development constraints. For the most current status, check the GitHub repository and development blog."
  },
  "HueHordes/articles/index.html": {
    "href": "HueHordes/articles/index.html",
    "title": "HueHordes Articles | VintageHue Mods Documentation",
    "summary": "HueHordes Articles This section contains detailed articles and guides for HueHordes. Available Articles Getting Started Installation Guide - Complete installation and setup guide for all platforms with troubleshooting Technical Documentation Advanced Pathfinding System - Comprehensive guide to the 3D A* pathfinding implementation with entity-aware coordinates, movement validation, and debugging tools AI System Architecture - Deep dive into the AI systems, behavior management, decision-making framework, and performance optimization Base Detection System - How HueHordes identifies and evaluates player bases including structure analysis and scoring systems Development and Planning Future Development Roadmap - Planned features, development timeline, and long-term vision for HueHordes evolution Article Categories \uD83D\uDE80 Getting Started - Installation guides, basic setup, and initial configuration \uD83E\uDD16 Technical Systems - Deep dives into mod architecture, AI systems, and implementation details \uD83C\uDFF0 Base Detection - Player base identification, analysis, and targeting systems ⚙️ Configuration - Advanced configuration options and customization guides \uD83D\uDC1B Troubleshooting - Common issues, debugging tools, and problem resolution \uD83D\uDD2E Future Development - Roadmaps, planned features, and development philosophy For the latest release information, see Changelog"
  },
  "HueHordes/articles/installation-guide.html": {
    "href": "HueHordes/articles/installation-guide.html",
    "title": "Installation Guide | VintageHue Mods Documentation",
    "summary": "Installation Guide This guide covers everything you need to know about installing and setting up HueHordes for Vintage Story. System Requirements Minimum Requirements Component Requirement Notes Vintage Story Version 1.21.1+ Base game required Operating System Windows 10+, Linux, macOS Cross-platform support Memory 4GB RAM available For mod and game operation Storage 50MB free space For mod files and logs Recommended Requirements Component Recommendation Benefits Vintage Story Latest stable version Best compatibility and performance Memory 8GB+ RAM Smooth operation with larger hordes CPU Multi-core processor Better pathfinding performance Installation Methods flowchart TD Start([\"\uD83D\uDE80 Start Installation\"]) subgraph \"Installation Options\" Browser[\"\uD83D\uDCE6 Mod Browser<br/>(Recommended)\"] Manual[\"\uD83D\uDCBE Manual Installation\"] Source[\"\uD83D\uDEE0️ Build from Source\"] end subgraph \"Mod Browser Process\" LaunchGame[\"▶️ Launch Vintage Story\"] OpenMods[\"\uD83D\uDCCB Open Mod Manager\"] Search[\"\uD83D\uDD0D Search 'HueHordes'\"] Download[\"⬇️ Download & Install\"] RestartBrowser[\"\uD83D\uDD04 Restart Game\"] end subgraph \"Manual Process\" GetRelease[\"\uD83D\uDCC1 Download Release\"] FindMods[\"\uD83D\uDCC2 Locate Mods Folder\"] CopyFiles[\"\uD83D\uDCCB Copy Files\"] RestartManual[\"\uD83D\uDD04 Restart Game\"] end subgraph \"Source Process\" Clone[\"\uD83D\uDCE5 Clone Repository\"] Build[\"\uD83D\uDD27 Build Project\"] CopySource[\"\uD83D\uDCCB Copy to Mods\"] RestartSource[\"\uD83D\uDD04 Restart Game\"] end subgraph \"Verification\" CheckMods[\"✅ Check Mod List\"] TestCommands[\"\uD83C\uDFAE Test Commands\"] ConfigCheck[\"⚙️ Check Config\"] end Success([\"\uD83C\uDF89 Installation Complete\"]) Start --> Browser Start --> Manual Start --> Source Browser --> LaunchGame LaunchGame --> OpenMods OpenMods --> Search Search --> Download Download --> RestartBrowser Manual --> GetRelease GetRelease --> FindMods FindMods --> CopyFiles CopyFiles --> RestartManual Source --> Clone Clone --> Build Build --> CopySource CopySource --> RestartSource RestartBrowser --> CheckMods RestartManual --> CheckMods RestartSource --> CheckMods CheckMods --> TestCommands TestCommands --> ConfigCheck ConfigCheck --> Success Method 1: Mod Browser (Recommended) Launch Vintage Story Open Mod Manager: Click \"Mods\" in the main menu Select \"Browse & Download Mods\" Search for HueHordes: Type \"HueHordes\" in the search box Click on the HueHordes mod entry Install the Mod: Click \"Download & Install\" Wait for download to complete Restart Vintage Story when prompted Method 2: Manual Installation Download Release Get the Latest Release: Visit GitHub Releases Download the latest HueHordes-vX.X.X.zip file Extract the ZIP archive Locate Mods Directory: Platform Mods Directory Path \uD83E\uDE9F Windows %APPDATA%\\VintageStory\\Mods\\ \uD83D\uDC27 Linux ~/.config/VintageStory/Mods/ \uD83C\uDF4E macOS ~/Library/Application Support/VintageStory/Mods/ Install Mod Files: Copy HueHordes.dll to your Mods directory Ensure the file is not in a subfolder Restart Vintage Story Build from Source For developers and advanced users: # Clone the repository git clone https://github.com/HueByte/VintageHue.git cd VintageHue/src/HueHordes/HueHordes # Build the project dotnet build --configuration Release # Copy to mods directory cp bin/Release/Mods/mod/HueHordes.dll [YOUR_MODS_DIRECTORY]/ Installation Verification Check Mod Loading Launch Vintage Story Open Mod Manager: Click \"Mods\" in main menu Select \"Manage Installed Mods\" Verify HueHordes: Look for \"HueHordes\" in the list Ensure status shows \"Loaded\" (green) Check version matches downloaded version Test Basic Functionality Server-Side Testing (Single Player or Server Admin) # Test configuration loading # Check server logs for: \"HueHordes: Mod system starting\" # Test commands (requires admin privileges) /horde spawn # Test entity spawning /horde detectbase # Test base detection /horde spawntobase # Spawn entities targeting base /horde debug base # Test debug system Client-Side Verification No Error Messages: Game should load without HueHordes-related errors Performance: No significant FPS drops or lag Compatibility: Other mods should continue working normally Configuration Setup Initial Configuration HueHordes automatically creates a configuration file on first run: Location: [VS_DATA]/ModConfig/Horde.server.json Default Configuration: { \"DaysBetweenHordes\": 3, \"Count\": 8, \"SpawnRadiusMin\": 12.0, \"SpawnRadiusMax\": 24.0, \"EntityCodes\": [\"drifter-normal\"], \"NudgeTowardInitialPos\": true, \"NudgeSeconds\": 20.0, \"NudgeSpeed\": 0.05, \"EnableDebugLogging\": false, \"DebugLoggingLevel\": 1 } Recommended First-Time Settings For new installations, consider these adjustments: { \"DaysBetweenHordes\": 7, // Longer intervals for learning \"Count\": 5, // Smaller hordes initially \"EnableDebugLogging\": true, // Enable for troubleshooting \"DebugLoggingLevel\": 2 // Detailed logging } Troubleshooting Installation Troubleshooting Flowchart flowchart TD Start([\uD83D\uDD27 Installation Problem]) ModVisible{Mod Visible in<br/>Mod Manager?} ModLoaded{Mod Status<br/>Shows 'Loaded'?} CommandWork{Commands<br/>Work?} Performance{Performance<br/>Issues?} %% File Issues CheckFile[\uD83D\uDCC1 Check File Location<br/>• DLL in Mods folder<br/>• Not in subfolder] CheckVersion[\uD83D\uDD0D Check Game Version<br/>• VS 1.21.1+<br/>• Compatible version] RedownloadMod[⬇️ Re-download Mod<br/>• Check file integrity<br/>• Use official source] %% Loading Issues CheckLogs[\uD83D\uDCCB Check Logs<br/>• server-main.txt<br/>• Look for errors] CheckDeps[\uD83D\uDD17 Check Dependencies<br/>• VS API version<br/>• Conflicting mods] ResetConfig[⚙️ Reset Config<br/>• Delete config file<br/>• Let mod recreate] %% Performance Issues DisableDebug[\uD83D\uDC1B Disable Debug<br/>• Set EnableDebugLogging: false<br/>• Reduce logging level] ReduceHordes[\uD83D\uDCC9 Reduce Load<br/>• Lower horde count<br/>• Increase intervals] CheckResources[\uD83D\uDCBB Check Resources<br/>• Monitor RAM/CPU<br/>• Close other apps] Success([✅ Problem Solved]) GetHelp[\uD83C\uDD98 Get Help<br/>• GitHub Issues<br/>• Community Support<br/>• Include logs] Start --> ModVisible ModVisible -->|No| CheckFile CheckFile --> CheckVersion CheckVersion --> RedownloadMod RedownloadMod --> ModVisible ModVisible -->|Yes| ModLoaded ModLoaded -->|No| CheckLogs CheckLogs --> CheckDeps CheckDeps --> ResetConfig ResetConfig --> ModLoaded ModLoaded -->|Yes| CommandWork CommandWork -->|No| CheckLogs CommandWork -->|Yes| Performance Performance -->|Yes| DisableDebug DisableDebug --> ReduceHordes ReduceHordes --> CheckResources CheckResources --> Success Performance -->|No| Success %% Failed paths RedownloadMod -.->|Still Failed| GetHelp ResetConfig -.->|Still Failed| GetHelp CheckResources -.->|Still Failed| GetHelp Common Issues Mod Not Loading Symptoms: HueHordes not visible in mod list Solutions: Check file location: Ensure HueHordes.dll is directly in Mods folder Verify game version: Confirm Vintage Story 1.21.1+ Check file integrity: Re-download if file is corrupted Review logs: Check Logs/server-main.txt for errors Configuration Errors Symptoms: Mod loads but doesn't function properly Solutions: Delete config file: Let HueHordes recreate defaults Check JSON syntax: Validate configuration format Reset to defaults: Use minimal configuration first Performance Issues Symptoms: Game lag or low FPS after installation Solutions: Disable debug logging: Set EnableDebugLogging: false Reduce horde size: Lower Count value Increase intervals: Higher DaysBetweenHordes Check system resources: Monitor RAM and CPU usage Compatibility Problems Symptoms: Other mods stop working or conflicts occur Solutions: Test mod isolation: Disable other mods temporarily Check mod versions: Ensure all mods support VS 1.21.1+ Review load order: Some mods may conflict with HueHordes Report issues: Submit bug report with mod list Getting Help Log Collection When reporting issues, include: Server Logs: Logs/server-main.txt Client Logs: Logs/client-main.txt Configuration: Your Horde.server.json file Mod List: All installed mods and versions Support Channels GitHub Issues: Report bugs and feature requests Documentation: Check articles for detailed guides Community: Vintage Story modding communities Next Steps After successful installation: Configuration Guide - Customize mod behavior AI System Architecture - Understand how the AI works Base Detection System - Learn about base detection mechanics Troubleshooting Guide - Solve common problems Advanced Installation Server Installation For dedicated servers: Install on Server: Place HueHordes.dll in server's Mods directory Configure Settings: Adjust Horde.server.json for server environment Admin Commands: Test commands with server admin privileges Client Compatibility: Clients don't need the mod installed Development Setup For mod development and testing: Development Environment: Set up .NET 8.0 SDK Source Code: Clone repository for full source access Debug Mode: Enable comprehensive logging Testing Tools: Use particle debug commands for development Need help? Check the Troubleshooting Guide or visit our GitHub Issues page."
  },
  "HueHordes/articles/pathfinding-system.html": {
    "href": "HueHordes/articles/pathfinding-system.html",
    "title": "Advanced Pathfinding System | VintageHue Mods Documentation",
    "summary": "Advanced Pathfinding System HueHordes features a sophisticated 3D A* pathfinding system designed specifically for Vintage Story's blocky terrain. The system provides realistic entity movement with intelligent obstacle avoidance and terrain navigation. Coordinate System Entity-Based Coordinates The pathfinding system validates three Y levels for each position: Y-1: Ground block (must be solid for entity to stand on) Y: Entity base level (must be passable for entity body) Y+1: Entity head clearance (must be passable for entity head) Coordinate Conversion Entity world positions are automatically converted to base-level coordinates: Entity at Y=3.4 → Entity base Y=3 (rounded down) Entity at Y=5.0 → Entity base Y=5 Pathfinding operates on integer coordinates for precise block-based movement How Pathfinding Works flowchart TD Start[Entity needs path] --> Check[Check if target reachable] Check --> |Yes| Calculate[Calculate A* path] Check --> |No| Fail[Return no path] Calculate --> Path[Return waypoints] Path --> Move[Entity follows path] Movement System Symmetrical Movement The pathfinding enforces ±1 block vertical movement for realistic navigation: Upward Movement (Jumping) Entity can jump from base level Y to Y+1 Requires solid ground at destination Y-1 Additional jump cost penalty applied to A* algorithm Downward Movement (Walking) Entity can walk down from base level Y to Y-1 No jumping required, natural stepping down Same movement cost as upward movement for algorithm balance Movement Validation For each potential move, the system validates: Ground Check (Y-1): Must be solid block for entity to stand on Base Clearance (Y): Must be clear air for entity base/bottom Body Clearance (Y+1): Must be clear air for entity body/top Diagonal Movement Protection Special validation prevents corner-cutting through solid blocks: // For diagonal moves, check intermediate positions var intermediatePos1 = new Vec3i(from.X, from.Y, to.Z); var intermediatePos2 = new Vec3i(to.X, from.Y, from.Z); // Both intermediate positions must be walkable return IsPositionWalkable(intermediatePos1) && IsPositionWalkable(intermediatePos2); Algorithm Features A* Implementation Heuristic: Manhattan distance for accurate 3D pathfinding Cost Function: Horizontal (1.0), Vertical (1.4), Diagonal (1.4), Jump penalty (2.0) Open/Closed Sets: Efficient node management with priority queue Maximum Nodes: Configurable search limit (default: 1000 nodes) Performance Optimizations Integer Coordinates: Fast coordinate operations without floating-point overhead Early Termination: Stops search when maximum nodes reached Stuck Detection: Automatic fallback to nearest accessible position Memory Management: Reusable data structures for multiple pathfinding calls Visual Debugging Particle System Integration The pathfinding system includes built-in visualization: Path Particles: Real-time display of calculated routes Coordinate Logging: Detailed debug output for each waypoint Entity Tracking: Unique particle colors per entity Performance Monitoring: Path calculation timing and node statistics Debug Commands # Show base detection with particles /horde debug base # Show pathfinding visualization /horde debug paths # Clear all debug particles /horde debug clear Log Output Examples [AStar/PathCoordinates] Entity mob_123: START(100.0,2.0,200.0) -> END(150.0,3.0,250.0) Path length: 23 waypoints [Particles/ParticleSpawned] Particle #1 at entity base (100,2,200) -> world pos (100.5,2.0,200.5) [Particles/ParticleSpawned] Particle #2 at entity base (101,2,201) -> world pos (101.5,2.0,201.5) [Particles/PathComplete] Complete path: (100,2,200) -> (101,2,201) -> (150,3,250) Entity mob_123: 23 nodes, 23 particles spawned Integration with AI System Entity Behavior Path Calculation: AI calls FindPath(start, end, entityId) Route Following: Entity follows waypoints in sequence Obstacle Handling: Dynamic recalculation when blocked State Management: Clean integration with AI state machine Base Detection Integration Target Validation: Ensures bases are reachable before pathfinding Height Adjustment: Automatically finds accessible positions near targets Multi-level Bases: Handles complex base structures with proper navigation Configuration Pathfinding Parameters Parameter Default Description MAX_JUMP_HEIGHT 1 Maximum blocks entity can jump up MAX_FALL_HEIGHT 10 Maximum blocks entity can safely fall MOVE_COST_HORIZONTAL 1.0 Cost for horizontal movement MOVE_COST_VERTICAL 1.4 Cost for vertical movement MOVE_COST_DIAGONAL 1.4 Cost for diagonal movement JUMP_COST_PENALTY 2.0 Additional cost for jumping Performance Tuning // Adjust maximum nodes for performance vs. accuracy public List<Vec3d> FindPath(Vec3d start, Vec3d end, string entityId, int maxNodes = 1000) // Enable/disable visualization for production var pathfinder = new AStarPathfinder(serverApi, enablePathVisualization: false); Best Practices For Modders Use Entity IDs: Always provide unique entity identifiers for debugging Handle Failed Paths: Check for empty results and implement fallbacks Cache Results: Store paths for entities to reduce computation Monitor Performance: Watch node count and calculation time in logs For Server Operators Debug Mode: Enable visualization only during development/testing Performance Monitoring: Watch for excessive pathfinding calls Memory Usage: Monitor entity count and active paths Log Analysis: Use coordinate logging to debug movement issues Troubleshooting Common Issues Issue Cause Solution No path found Unreachable target Check for blocks between start/end Entities stuck Invalid terrain Verify ground blocks and clearance Performance lag Too many pathfinding calls Reduce entity count or cache paths Incorrect particles Coordinate mismatch Verify Y-coordinate system usage Debug Logging Enable detailed pathfinding logs in ModConfig/Horde.server.json: { \"EnableDebugLogging\": true, \"DebugLoggingLevel\": 2 } This will output comprehensive pathfinding information for analysis and troubleshooting."
  },
  "HueHordes/changelog/index.html": {
    "href": "HueHordes/changelog/index.html",
    "title": "HueHordes Changelog | VintageHue Mods Documentation",
    "summary": "HueHordes Changelog This section contains version-specific changelogs for HueHordes. Version History Each version has its own detailed changelog file: v1.0.0 - Current version Changelog Format Each changelog follows the Keep a Changelog format: Added - New features Changed - Changes in existing functionality Deprecated - Soon-to-be removed features Removed - Removed features Fixed - Bug fixes Security - Security improvements"
  },
  "HueHordes/changelog/v1.0.0.html": {
    "href": "HueHordes/changelog/v1.0.0.html",
    "title": "HueHordes v1.0.0 | VintageHue Mods Documentation",
    "summary": "HueHordes v1.0.0 Release Date: 28/09/2025 Target Game Version: Vintage Story 1.21.1 Added Core Horde System Periodic horde spawning system that creates waves of hostile entities around players Configurable timing system with default 3-day intervals between horde events Ring-based spawn mechanics with customizable radius (12-24 blocks from player) Multi-entity support with configurable entity types (defaults to drifter-normal) Smart spawn count management (default: 8 entities per horde) AI & Behavior Systems Clean AI architecture with modern entity behavior system AIBehavior - Entity behavior that handles pathfinding and targeting Smart targeting system with line-of-sight detection Base detection capabilities for intelligent horde targeting Advanced A pathfinding* with 3D navigation and obstacle avoidance State management with NavigatingToBase, AttackingTarget, and DestroyingDoor states Door destruction system with health tracking and coordinated attacks Configuration Management Server-side JSON configuration (Horde.server.json) with the following options: DaysBetweenHordes - Interval between horde events (default: 3 days) Count - Number of mobs per horde (default: 8) SpawnRadiusMin/Max - Spawn distance range (default: 12-24 blocks) EntityCodes - Array of entity types to spawn NudgeTowardInitialPos - Enable movement toward player (default: true) NudgeSeconds - Duration of nudge behavior (default: 20s) NudgeSpeed - Movement speed multiplier (default: 0.05) EnableDebugLogging - Enable debug logging system (default: false) DebugLoggingLevel - Debug logging level 0-3 (default: 1) Administrative Commands /horde spawn [playername] [count] [entitytype] - Spawn entities around player for testing /horde detectbase [playername] [radius] - Test base detection for player /horde spawntobase [playername] [count] - Spawn entities that target player's base /horde debug [playername] [mode] - Debug visualization with particle system Debug Commands /horde <command> [args] - Main horde management system with integrated debug visualization Advanced Pathfinding & Visualization 3D A pathfinding* with entity-aware coordinate system Particle debug system for real-time path and base visualization Entity base detection with intelligent targeting Door health management with coordinated destruction Debug logging system with comprehensive AI event tracking Technical Features Modern entity behavior system with clean state management Comprehensive error handling and validation systems Game tick integration with 5-tick intervals for efficient processing Performance optimization with stuck detection and path caching Type safety with strongly-typed configuration models Debug visualization with particle system integration Technical Details Architecture Built as a Vintage Story Code Mod using C# and .NET 8.0 Implements ModSystem base class for proper game integration Uses Vintage Story API 1.21.1 for full game compatibility Follows async/await patterns for modern, non-blocking code execution Entity Spawning Supports any Vintage Story entity code (full or domain-less) Ring-based spawning algorithm prevents entities from spawning too close to players Intelligent spawn validation to ensure entities spawn in valid locations Custom nudge behavior temporarily guides entities toward player positions Performance Optimizations Async AI systems reduce game lag during horde processing 5-second tick intervals balance responsiveness with performance Efficient base detection algorithms minimize computational overhead Smart targeting reduces unnecessary entity scanning This changelog follows Keep a Changelog format."
  },
  "HueHordes/index.html": {
    "href": "HueHordes/index.html",
    "title": "HueHordes | VintageHue Mods Documentation",
    "summary": "HueHordes Periodic horde spawning system for enhanced survival gameplay Quick Links Articles Changelog API Reference Overview HueHordes is a Vintage Story mod that enhances your gameplay experience. Current Version: 1.0.0 Getting Started Download the latest release from the GitHub releases page Install the mod in your Vintage Story mods folder Start the game and enjoy! Documentation Sections Articles Detailed guides, tutorials, and documentation about using HueHordes. Changelog Version history showing what changed in each release. API Reference Complete API documentation for developers."
  },
  "api.html": {
    "href": "api.html",
    "title": "\uD83D\uDCDA HueHordes API Reference | VintageHue Mods Documentation",
    "summary": "\uD83D\uDCDA HueHordes API Reference Comprehensive API documentation for the HueHordes Vintage Story mod This document provides detailed information about the HueHordes mod architecture, classes, and extension points for developers who want to understand or extend the mod. \uD83C\uDFD7️ Architecture Overview HueHordes follows a clean, modular architecture with separated concerns: HueHordes/ ├── \uD83C\uDFAE HueHordesModSystem.cs # Main mod entry point ├── \uD83D\uDCC1 AI/ # Core AI implementation │ ├── \uD83E\uDD16 AIBehavior.cs # Entity AI behavior │ ├── \uD83D\uDDFA️ AStarPathfinder.cs # 3D pathfinding │ ├── \uD83C\uDFE0 BaseDetection.cs # Player base detection │ ├── \uD83D\uDEAA DoorHealthManager.cs # Door destruction system │ ├── \uD83C\uDFAF TargetDetection.cs # Player targeting │ ├── \uD83C\uDFE2 HordeSystem.cs # Main coordinator │ └── \uD83C\uDF1F SpawningSystem.cs # Entity spawning ├── \uD83D\uDCCA Debug/ # Logging system │ └── \uD83D\uDD0D DebugLogger.cs # Centralized logging └── \uD83D\uDCCB Models/ # Data models └── ⚙️ ServerConfig.cs # Configuration \uD83C\uDFAE Core Classes HueHordesModSystem Namespace: HueHordes Purpose: Main mod system that integrates all components public class HueHordesModSystem : ModSystem { public override void StartServerSide(ICoreServerAPI api) public override void Dispose() } Key Responsibilities: Mod initialization and cleanup Configuration loading and management Integration with HordeSystem \uD83E\uDD16 AI System Classes AIBehavior Namespace: HueHordes.AI Purpose: Core AI behavior for spawned entities public class AIBehavior : EntityBehavior { public AIBehavior(Entity entity, DoorHealthManager doorHealthManager) public override void OnGameTick(float dt) public override string PropertyName() => \"ai\" } Key Features: State machine with 3 states: NavigatingToBase, AttackingTarget, DestroyingDoor Performance optimized with 5-tick update intervals Automatic stuck detection and recovery Clean integration with Vintage Story's entity system AI States: public enum AIState { NavigatingToBase, // Moving toward player base AttackingTarget, // Engaging nearby players DestroyingDoor // Attacking doors/gates } AStarPathfinder Namespace: HueHordes.AI Purpose: 3D pathfinding algorithm for entity navigation public class AStarPathfinder { public AStarPathfinder(ICoreServerAPI sapi) public List<Vec3d> FindPath(Vec3d start, Vec3d end, int maxNodes = 10000) public Vec3d? FindNearestAccessiblePosition(Vec3d targetPos, int searchRadius = 5) } Key Features: 3D A* pathfinding algorithm Obstacle avoidance and jump mechanics Accessibility checking for unreachable targets Performance optimized with node limits Supporting Classes: public class PathNode : IComparable<PathNode> { public Vec3d Position { get; set; } public float GCost { get; set; } // Distance from start public float HCost { get; set; } // Distance to end public float FCost => GCost + HCost; public PathNode? Parent { get; set; } } public class PriorityQueue<T> where T : IComparable<T> { public void Enqueue(T item) public T Dequeue() public int Count { get; } } BaseDetection Namespace: HueHordes.AI Purpose: Intelligent detection of player bases and structures public class BaseDetection { public BaseDetection(ICoreServerAPI serverApi) public DetectedBase? DetectPlayerBase(IServerPlayer player, int searchRadius) public Vec3d? FindPlayerBed(IServerPlayer player, int searchRadius = 50) } Detection Algorithm: Scans for key indicators: beds, doors, chests, workstations Calculates base score based on structure density Classifies base types: HomeBase, WorkshopBase, BasicBase, Outpost Caches results for performance DetectedBase Model: public class DetectedBase { public Vec3d Center { get; set; } public string BaseType { get; set; } public int BaseScore { get; set; } public int IndicatorCount { get; set; } public double DistanceFromPlayer { get; set; } public Vec3d? BedPosition { get; set; } } DoorHealthManager Namespace: HueHordes.AI Purpose: Health-based door destruction with attacker limits public class DoorHealthManager { public DoorHealthManager(ICoreServerAPI serverApi) public bool TryRegisterAttacker(Vec3d doorPos, long entityId) public void UnregisterAttacker(Vec3d doorPos, long entityId) public bool AttackDoor(Vec3d doorPos, long entityId, float damage = 50f) public void CleanupOldDoors() } Features: 2000HP per door/gate Maximum 3 concurrent attackers per door Automatic cleanup of destroyed doors Thread-safe attacker management DoorInfo Model: public class DoorInfo { public Vec3i Position { get; set; } public float MaxHealth { get; set; } = 2000f; public float CurrentHealth { get; set; } = 2000f; public int MaxAttackers { get; set; } = 3; public HashSet<long> CurrentAttackers { get; set; } public long LastAttackTime { get; set; } public float HealthPercentage => CurrentHealth / MaxHealth; } TargetDetection Namespace: HueHordes.AI Purpose: Player targeting with line-of-sight and game mode filtering public class TargetDetection { public TargetDetection(ICoreServerAPI serverApi) public Entity? FindNearestPlayer(Vec3d position, float maxRange) public Entity[] FindAllPlayersInRange(Vec3d position, float maxRange) public bool IsValidTarget(Entity entity) public Vec3d GetTargetAimPoint(Entity target) public Vec3d PredictTargetPosition(Entity target, float predictionTime) } Smart Features: Ignores creative and spectator mode players Line-of-sight checking with transparent block support Target prediction for moving players Realistic aim point calculation \uD83C\uDFE2 System Coordination HordeSystem Namespace: HueHordes.AI Purpose: Main coordinator for all AI systems public class HordeSystem { public HordeSystem(ICoreServerAPI serverApi) public DoorHealthManager DoorHealthManager { get; } public BaseDetection GetBaseDetection() public SpawningSystem GetSpawningSystem() } Command System: /newhorde spawn [playername] [count] [entitytype] /newhorde detectbase [playername] [radius] /newhorde spawntobase [playername] [count] SpawningSystem Namespace: HueHordes.AI Purpose: Entity spawning with AI behavior assignment public class SpawningSystem { public SpawningSystem(ICoreServerAPI serverApi, DoorHealthManager doorHealthManager) public List<Entity> SpawnAroundPlayer(IServerPlayer player, SpawnConfig config) } SpawnConfig Model: public class SpawnConfig { public string EntityCode { get; set; } = \"game:drifter-normal\"; public int EntityCount { get; set; } = 5; public float MinRadius { get; set; } = 20f; public float MaxRadius { get; set; } = 50f; public static SpawnConfig Default { get; } } \uD83D\uDCCA Debug System DebugLogger Namespace: HueHordes.Debug Purpose: Centralized logging system for debugging and monitoring public static class DebugLogger { public static void Initialize(ICoreServerAPI api, bool enableDebugLogging, int debugLevel) public static void AIEvent(string eventName, string details, string entityId = \"\") public static void AISpawn(string entityType, string position, string target) public static void AITarget(string entityId, string targetType, string targetName, string context) public static void Event(string eventName, string details) public static void Error(string message, Exception? ex = null) } Logging Categories: AI Events: State changes, pathfinding, behavior Spawn Events: Entity creation and placement Target Events: Player targeting and detection General Events: System operations Errors: Exception handling and troubleshooting \uD83D\uDCCB Configuration ServerConfig Namespace: HueHordes.Models Purpose: Mod configuration with hot-reload support public class ServerConfig { public bool EnableDebugLogging { get; set; } = false; public int DebugLoggingLevel { get; set; } = 1; } Configuration File: ModConfig/Horde.server.json \uD83D\uDD0C Extension Points Creating Custom AI Behaviors Extend the AIBehavior class to create custom entity behaviors: public class CustomAIBehavior : AIBehavior { public CustomAIBehavior(Entity entity, DoorHealthManager doorHealthManager) : base(entity, doorHealthManager) { // Custom initialization } protected override void HandleCustomState(Vec3d entityPos, long currentTime) { // Custom behavior logic } } Adding New AI States Extend the AIState enum: public enum AIState { NavigatingToBase, AttackingTarget, DestroyingDoor, CustomState // Your new state } Add handling in AIBehavior.OnGameTick(): switch (currentState) { case AIState.CustomState: HandleCustomState(entityPos, currentTime); break; } Custom Base Detection Extend BaseDetection to add new structure types: public class CustomBaseDetection : BaseDetection { protected override bool IsCustomIndicator(Block block) { // Custom structure detection logic return block.Code?.ToString().Contains(\"custom-structure\") == true; } } Enhanced Door Systems Extend DoorHealthManager for custom destruction mechanics: public class CustomDoorHealthManager : DoorHealthManager { public bool AttackCustomStructure(Vec3d pos, long entityId, float damage) { // Custom destruction logic return base.AttackDoor(pos, entityId, damage); } } \uD83E\uDDEA Testing and Development Debug Configuration Enable comprehensive logging: { \"EnableDebugLogging\": true, \"DebugLoggingLevel\": 3 } Testing Commands Use admin commands for development testing: # Test basic functionality /newhorde spawn TestPlayer 1 drifter-normal # Test base detection /newhorde detectbase TestPlayer 50 # Test full system integration /newhorde spawntobase TestPlayer 3 Performance Monitoring Monitor performance through debug logs: AI update frequency (5-tick intervals) Pathfinding performance (node counts, timing) Memory usage (entity cleanup, path caching) Concurrent attacker limits (door health system) \uD83D\uDCC4 API Usage Examples Basic Entity Spawning var spawningSystem = hordeSystem.GetSpawningSystem(); var config = new SpawnConfig { EntityCode = \"game:drifter-normal\", EntityCount = 5, MinRadius = 20f, MaxRadius = 40f }; var entities = spawningSystem.SpawnAroundPlayer(player, config); Base Detection var baseDetection = hordeSystem.GetBaseDetection(); var detectedBase = baseDetection.DetectPlayerBase(player, 60); if (detectedBase != null) { Console.WriteLine($\"Found {detectedBase.BaseType} at {detectedBase.Center}\"); } Door Health Management var doorManager = hordeSystem.DoorHealthManager; if (doorManager.TryRegisterAttacker(doorPosition, entityId)) { bool destroyed = doorManager.AttackDoor(doorPosition, entityId, 50f); if (destroyed) { // Door was destroyed } } \uD83D\uDCDA API Reference Complete For more information, see the main documentation or contributing guide."
  },
  "index.html": {
    "href": "index.html",
    "title": "VintageHue Mods Documentation | VintageHue Mods Documentation",
    "summary": "VintageHue Mods Documentation Welcome to the comprehensive documentation for all VintageHue mods! Available Mods HueHordes Version: 1.0.0+ Description: Advanced horde spawning system with intelligent AI, sophisticated pathfinding, and particle debugging Key Features: \uD83E\uDDED Enhanced 3D A* pathfinding with entity-aware coordinates ✨ Real-time particle visualization for debugging and development \uD83C\uDFAF Symmetrical ±1 block movement with diagonal validation \uD83C\uDFE0 Smart base detection and targeting system \uD83D\uDD27 Comprehensive debug commands and logging Technical Documentation Core Systems Advanced Pathfinding System - Comprehensive guide to the 3D A* pathfinding implementation Repository Structure This documentation follows a structured approach: Each mod has its own documentation folder under docs/ModName/ Articles - Detailed guides and tutorials Technical Docs - System architecture and implementation details Changelog - Version-specific changes following Keep a Changelog Releases - Release notes with commit history API Reference - Auto-generated API documentation Quick Navigation Mod Current Version Documentation HueHordes 1.0.0 HueHordes Docs About VintageHue VintageHue is a collection of high-quality Vintage Story mods that enhance your gameplay experience with modern development practices, comprehensive testing, and detailed documentation. Development Philosophy Modern Architecture - Built with .NET 8 and best practices Thoroughly Tested - Comprehensive test coverage Well Documented - Complete documentation for users and developers High Performance - Optimized for minimal resource usage Open Source - Community-driven development"
  }
}